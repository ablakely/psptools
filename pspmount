#!/usr/bin/perl -w

# pspmount - PSP mount/umount script
#            mounts psp to /mnt/psp by default
# Written by Aaron Blakely <aaron@ephasic.org>
#
# Distributed as part of PSPTools:
# http://github.com/ablakely/psptools

use strict;
use warnings;

my $mountpath     = "/mnt/psp";
my $idx           = 0;
my $createRestore = 0;
my $restoreMode   = 0;
my $cfilePath     = "";
my $rfilePath     = "";

MODS:
if (not defined $ARGV[$idx]) { goto EXEC; }

if ($ARGV[$idx] eq "-V" || $ARGV[$idx] eq "-h" || $ARGV[$idx] eq "--help" || $ARGV[$idx] eq "--version") {
	print "\npspmount v0.5:  Automates the mounting process on systems which don't have automounting.\n";
	print "Written by Aaron Blakely <aaron\@ephasic.org>\n\n";
	print "Usage: $0 [-hp] [path]\n";
	print "  -h - Displays this message.\n";
	print "  -p [path] - Changes the mountpoint.\n";
	print "  -b [file] - Creates a backup image of the PSP.\n";
	print "  -r [file] - Restores the PSP from a backup image.\n\n";
	print "pspmount is distributed as part of the psptools package: http://github.com/ablakely/psptools\n\n";
	exit;
}

if ($ARGV[$idx] eq "-b" || $ARGV[$idx] eq "--backup") {
	$createRestore = 1;
	$cfilePath     = $ARGV[++$idx];

	unless (system "sync && umount $mountpath && rmdir $mountpath") {
		$idx++;
		goto MODS;
	}
}

if ($ARGV[$idx] eq "-r" || $ARGV[$idx] eq "--restore") {
	$restoreMode = 1;
	$rfilePath   = $ARGV[++$idx];

	unless (system "sync && umount $mountpath && rmdir $mountpath") {
		$idx++;
		goto MODS;
	}
}

if ($ARGV[$idx] eq "-p" || $ARGV[$idx] eq "--path") {
	$mountpath = $ARGV[++$idx];

	$idx++;
	goto MODS;
}


EXEC:

if (`whoami` !~ /root/) {
	die "This program requires root!  Exiting...\n";
}

if (-e "$mountpath") {
	unless (system "sync && umount $mountpath && rmdir $mountpath") {
		exit;
	}
}

my $scsiID;
my $blockDev;
my @partitions;

print "Looking for PSP...\n";

my @pspgrep  = `dmesg | grep PSP`;

if ($pspgrep[-1] =~ /scsi (.*)/) {
	my @s = split(" ", $1);
	$scsiID = $s[0];
	$scsiID =~ s/\:$//;

	print "\nFOUND! \nADDR: $scsiID\n";
	my @bdlookup = `dmesg | grep '$scsiID'`;

	foreach my $lookup (@bdlookup) {
		if ($lookup =~ /$scsiID: \[(.*)\]/) {

			if (-e "/dev/$1") {
				print "Block Device: $1\n";
				my @pstrs = `dmesg | grep $1:`;
				my @pstr  = split(" ", $pstrs[-1]);

				if (-e "/dev/$1" && !-e "/dev/".$1."1") {
					die "Error: PSP found but memory stick is not inserted or formated?  Exiting.\n";
				}

				print "Scanning for /dev/$1 partitions: \n";

				for (my $i = 3; $i < scalar @pstr; $i++) {
					print "  Found partition: /dev/$pstr[$i]\n";
					push(@partitions, $pstr[$i]);
				}

				print "Attempting to mount first partiton...\n";
				if (!-e "$mountpath") {
					system "mkdir $mountpath";
				}

				if (-e "/dev/$partitions[0]") {
					unless (system "mount -o rw,noauto,async,user,umask=1000 /dev/$partitions[0] $mountpath") {
						print "\nPSP mounted to $mountpath\n";

						if ($createRestore == 1) {
							print "Creating backup image of PSP: $cfilePath\n";
							system "dd if=/dev/$partitions[0] of=$cfilePath";
						}

						if ($restoreMode == 1) {
							print "Restoring PSP from $rfilePath\n";
							system "dd if=$rfilePath of=/dev/$partitions[0]";
						}

						exit;
					}
				}

			} else {
				die "Found PSP but it's not mountable!  Exiting.\n";
			}
		}
	}
} else {
	die "Can't find PSP in dmesg!  Exiting.\n";
}
